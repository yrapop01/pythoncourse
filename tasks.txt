Anagrams:
--------

Write a function which tells if one string is an anagram of another.

Palindromes:
------------

Write a function which tells if a string is a palindrome.

Grep:
-----

Write python file grep.py which gets two parameters: path and regular expression.
When grep.py is executed, it should walk through all files in the the directory tree of the path and for every file print all the lines that match the regular expression.


Tic-Tac-Toe:
------------

Implement class ShellBoard which will complement the other tic-tac-toe files and allow playing tic-tac-toe from shell.

Reflection:
-----------

Write a function remove_non_reflection(d) which gets a dictionary
and removes all keys that are not reflections of their values.

intput:
d = {"ab": "ba", "b": "a"}

output:
     {"ab": "ba"}

Divisors:
---------

Write a generator divisors(n) which yields all prime divisors of n.
Write a file divisros.py which gets as argument an integer n and when executed prints all prime divisors of n.
Bonus: Write a file subp_divisors.py, which for every number in stdin executes divisors.py and prints its output.

Requests:
---------

install flask and requests

* implement json echo server: a server which gets json in post
  request and sends the json back as a response
  if the input is not a valid json, error should occur
  Use echo_json_stub.py as a stub.

* implement a file named send.py which gets an address
  and a json string as an arguments and sends the json
  to the given address. It expects to get a json in response.
  If either input or output json is not invalid,
  an error should occur.
  Use send_stub.py as a stub.


RPC:
----

* implement a module rpc.py with a decorator expose(app) which
  exposes the decorated function such that running the following
  commands in parrallel (in different windows):

    * python exposer.py
    * python send.py "http://127.0.0.1:5000/f '{"args": [1, 2, 3], "kwargs": {"n": 2}}'

  will cause the function f(1, 2, 3, n=2) to be called on the server and return its
  return value as json to the client.

Scheduler:
----------

# https://github.com/yrapop01/pythoncourse/

Write a class Scheduler which allows the following usage:

scheduler = Scheduler()

@scheduler.task('15:40')
def task1():
    """This task will run every day at 15:40"""
    pass

@scheduler.task('XX:X5')
def task1():
    """This task will run every 10 minutes when minute arrow
        value ends with 5"""
    pass

@scheduler.task('XX:10')
def task1():
    """This task will run every hour when minute arrow shows 10"""
    pass

scheduler.run()



Notes:
    'X' may only be leading (no 'X's are allowed after a number)
    Use multiprocessing module to run every task in different process
